{"version":3,"sources":["Components/Home.js","Components/About.js","Components/Contact.js","Components/NoMatch.js","Components/Layout.js","Components/Navbar.js","Components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Home","About","Contact","NoMatch","Layout","props","Container","children","Styles","styled","div","NavigatorBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","Jumbotron","fluid","App","Fragment","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAEaA,EAAO,kBAChB,6BACI,oDACA,wGCHKC,EAAQ,kBACjB,6BACI,kDACA,wGCHKC,EAAU,kBACnB,6BACI,oDACA,wGCHKC,EAAU,kBACnB,6BACI,oD,QCEKC,G,MAAS,SAACC,GAAD,OAElB,kBAACC,EAAA,EAAD,KACKD,EAAME,Y,6TCLf,IAAMC,EAASC,IAAOC,IAAV,KAaCC,EAAe,kBACxB,kBAACH,EAAD,KACI,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACX,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,aACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,KAAf,SACV,kBAACK,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,UAAf,UACV,kBAACK,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,YAAf,iB,0jBCrB9B,IAAMP,EAASC,IAAOC,IAAV,KA2BCc,EAAY,kBACrB,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACJ,UAAU,MACvB,yBAAKF,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,WACJ,yBAAKE,UAAU,YACf,kBAACf,EAAA,EAAD,KACI,uCACA,gDCXDoB,MAnBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAW9B,IAC3C,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,mBAAmBC,UAAW7B,IAChD,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,qBAAqBC,UAAW5B,IAClD,kBAAC,IAAD,CAAO4B,UAAW3B,SCVR4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30e681b8.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Home = () => (\n    <div>\n        <h2>Hi My Name is Cristo</h2>\n        <p>Its a pleasure meeting you guys please feel free to check up my website</p>\n    </div>\n)","import React from 'react'\n\nexport const About = () => (\n    <div>\n        <h2>This is About Page</h2>\n        <p>Its a pleasure meeting you guys please feel free to check up my website</p>\n    </div>\n)","import React from 'react'\n\nexport const Contact = () => (\n    <div>\n        <h2>This is Contact Page</h2>\n        <p>Its a pleasure meeting you guys please feel free to check up my website</p>\n    </div>\n)","import React from 'react'\n\nexport const NoMatch = () => (\n    <div>\n        <h2>404 No Match Found</h2>\n    </div>\n)","import React from 'react';\nimport {Container} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport '../Styling/back.css';\n\n\nexport const Layout = (props) =>(\n    \n    <Container>\n        {props.children}\n    </Container>\n)","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n    .navbar {\n        background-color: #222;\n    }\n    .navbar-brand, .navbar-nav .nav-link {\n        color: #bbb;\n    \n        &:hover{\n        color: white;\n        font-weight: bold;\n        }\n    }\n`;\nexport const NavigatorBar = () => (\n    <Styles>\n        <Navbar expand=\"lg\">\n            <Navbar.Brand href=\"/\">PortFolio</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link href=\"/contact\">Contact</Nav.Link></Nav.Item>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </Styles>\n)\n\n","import React from 'react';\nimport {Jumbotron as Jumbo, Container} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport '../Styling/back.css';\n\nconst Styles = styled.div`\n    \n    .overlay{\n        background-color: #fff;\n        opacity: 0.6;\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        z-index: -1;\n    }\n    .bg {\n        height: 100%;\n        background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);\n        overflow: hidden;\n\n    }\n    h1, p{\n        color: white;\n    \n        &:hover{\n        color: yellow;\n        font-weight: bold;\n        }\n    }\n`;\nexport const Jumbotron = () =>(\n    <Styles>\n        <Jumbo fluid className=\"bg\">\n        <div id='stars'></div>\n        <div id='stars2'></div>\n        <div id='stars3'></div>\n            <div className=\"overlay\"></div>\n            <Container >\n                <h1>Welcome</h1>\n                <p>Learn to Code</p>\n            </Container>\n\n        </Jumbo>\n    </Styles>\n\n)","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {Home} from './Components/Home';\nimport {About} from './Components/About';\nimport {Contact} from './Components/Contact';\nimport {NoMatch} from './Components/NoMatch';\nimport {Layout } from './Components/Layout';\nimport {NavigatorBar} from './Components/Navbar';\nimport {Jumbotron} from './Components/Jumbotron';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavigatorBar />\n      <Jumbotron />\n      <Layout>\n      <Router>\n        <Switch>\n          <Route exact path=\"/portfolio/\" component={Home} />\n          <Route exact path=\"/portfolio/about\" component={About} />\n          <Route exact path=\"/portfolio/contact\" component={Contact} />\n          <Route component={NoMatch} />\n        </Switch>\n      </Router>\n      </Layout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}